<MudNavMenu>
    @if (CurrentSmartHome is not null)
    {
        <MudNavLink Href="@($"/smarthome/{CurrentSmartHome.Id}/overview")" Icon="@Icons.Material.Filled.Dashboard">
            <p class="menu-wrapper">Overview</p>
        </MudNavLink>

        <MudNavLink Href="@($"/smarthome/{CurrentSmartHome.Id}/devices")" Icon="@Icons.Material.Filled.Devices">
            <p class="menu-wrapper">Devices</p>
        </MudNavLink>

        <MudNavLink Href="@($"/smarthome/{CurrentSmartHome.Id}/logs")" Icon="@Icons.Material.Filled.List">
            <p class="menu-wrapper">Logs</p>
        </MudNavLink>

        <MudNavLink Href="@($"/smarthome/{CurrentSmartHome.Id}/routines")" Icon="@Icons.Material.Filled.Autorenew">
            <p class="menu-wrapper">Routines</p>
        </MudNavLink>

        <MudNavLink Href="@($"/smarthome/{CurrentSmartHome.Id}/beheer")" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">
            <p class="menu-wrapper">Beheer</p>
        </MudNavLink>
    }
    else
    {
        <MudNavLink Href="/smarthome" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
            <p class="menu-wrapper">Smart Homes</p>
        </MudNavLink>
        <MudNavLink Href="person" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.AccountBox">
            <p class="menu-wrapper">Person</p>
        </MudNavLink>
    }  
</MudNavMenu>

@code{
    [CascadingParameter(Name = "CurrentSmartHome")]
    public SmartHomeModel? CurrentSmartHome { get; set; }

    public static void ReloadPage(NavigationManager navManager, string page)
    {
        var base64 = Base64Encode(page);
        navManager.NavigateTo($"/redirect/{base64}");
    }
    public static void Redirect(NavigationManager navManager, string? base64, string targetPage = "/")
    { 
        if (base64 != null)
        {
            var url = Base64Decode(base64);

            if (url.StartsWith("http") && !url.ToLower().StartsWith(navManager.BaseUri.ToLower())) //we do not want to rediract to offsite urls
            {
                Console.WriteLine($"Offsite url detected: redirection to \"{url}\" was blocked.");
                navManager.NavigateTo("/");
                return;
            }

            navManager.NavigateTo(url);
            return;
        }

        navManager.NavigateTo(targetPage);
    }
    public static void Login(NavigationManager navManager)
    {
        var uri = navManager.ToBaseRelativePath(navManager.Uri);
        if (uri.ToLower().StartsWith("login")) 
            return;
        else
            navManager.NavigateTo($"/login/{Base64Encode(uri)}");
    }

    public static void Logout(NavigationManager navManager)
    {
        var uri = navManager.ToBaseRelativePath(navManager.Uri);
        if (uri == "/")
            navManager.NavigateTo("/logout");
        else
            navManager.NavigateTo($"/logout/{Base64Encode(uri)}");
    }


    public static string Base64Encode(string plainText)
    {
        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
        return System.Convert.ToBase64String(plainTextBytes);
    }
    public static string Base64Decode(string base64EncodedData)
    {
        var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);
        return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
    }
}