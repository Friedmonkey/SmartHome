@inject SmartHomeState smartHomeState;
@inject ApiService apiService;
@inject ISnackbar snackBar;

<MudNavMenu>
    <MudNavLink Href="/smarthome" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
        Smart Homes
    </MudNavLink>
    @if (CurrentSmartHome is not null)
    {
        <MudNavLink Href="@($"/smarthome/{CurrentSmartHome.Id}/overview")" Icon="@Icons.Material.Filled.Dashboard">
            Overview
        </MudNavLink>

        <MudNavLink Href="@($"/smarthome/{CurrentSmartHome.Id}/devices")" Icon="@Icons.Material.Filled.Devices">
            Devices
        </MudNavLink>

        <MudNavLink Href="@($"/smarthome/{CurrentSmartHome.Id}/logs")" Icon="@Icons.Material.Filled.List">
            Logs
        </MudNavLink>

        <MudNavLink Href="@($"/smarthome/{CurrentSmartHome.Id}/routines")" Icon="@Icons.Material.Filled.Autorenew">
            Routines
        </MudNavLink>

        <MudNavLink Href="@($"/smarthome/{CurrentSmartHome.Id}/beheer")" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">
            Beheer
        </MudNavLink>
    }
    else
    {
        <MudNavLink Href="person" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.AccountBox">person</MudNavLink>
    }  
</MudNavMenu>

@code{
    public SmartHomeModel? CurrentSmartHome { get; private set; } = null;
    protected override async Task OnParametersSetAsync()
    {
        Guid? guid = smartHomeState.GetCurrentSmartHomeGuid();
        if (guid is not null)
        {
            var smartHome = await apiService.GetSmartHomeById(new((Guid)guid!));
            if (smartHome.EnsureSuccess(snackBar))
            {
                CurrentSmartHome = smartHome.smartHome;
                return;
            }
        }
        CurrentSmartHome = null;
    }


    public static void Redirect(NavigationManager navManager, string? base64)
    { 
        if (base64 != null)
        {
            var url = Base64Decode(base64);

            if (url.StartsWith("http") && !url.ToLower().StartsWith(navManager.BaseUri.ToLower())) //we do not want to rediract to offsite urls
            {
                Console.WriteLine($"Offsite url detected: redirection to \"{url}\" was blocked.");
                navManager.NavigateTo("/");
                return;
            }

            navManager.NavigateTo(url);
            return;
        }

        navManager.NavigateTo("/");
    }
    public static void Login(NavigationManager navManager)
    {
        var uri = navManager.ToBaseRelativePath(navManager.Uri);
        if (uri.ToLower().StartsWith("login")) 
            return;
        else
            navManager.NavigateTo($"/login/{Base64Encode(uri)}");
    }

    public static void Logout(NavigationManager navManager)
    {
        var uri = navManager.ToBaseRelativePath(navManager.Uri);
        if (uri == "/")
            navManager.NavigateTo("/logout");
        else
            navManager.NavigateTo($"/logout/{Base64Encode(uri)}");
    }


    public static string Base64Encode(string plainText)
    {
        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
        return System.Convert.ToBase64String(plainTextBytes);
    }
    public static string Base64Decode(string base64EncodedData)
    {
        var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);
        return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
    }
}