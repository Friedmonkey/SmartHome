@inject NavigationManager navManager;
@inject ISmartHomeService smartHomeService;
@inject SelectedSmartHomeService selectedSmartHomeService;

@if (CurrentSmartHome is not null)
{ 
    <div class="d-flex flex-row">
        <MudIconButton Icon="@Icons.Material.Rounded.Home" OnClick="@(() => navManager.NavigateTo("/smarthome"))" />
        <MudAutocomplete ValueChanged="OnValueChanged" Value="CurrentSmartHome" T="SmartHomeModel" ToStringFunc="@(shm => shm.Name)" Label="Selected SmartHome" SearchFunc="@Search" ShowProgressIndicator="true" Strict="false" />
    </div>
}

@code {
    [CascadingParameter(Name = "CurrentSmartHome")]
    public SmartHomeModel? CurrentSmartHome { get; set; }

    private SmartHomeModel ExitHome = new SmartHomeModel()
        {
            Id = Guid.AllBitsSet,
            Name = "Exit"
        };
    private void OnValueChanged(SmartHomeModel newSelected)
    {
        if (newSelected == ExitHome)
        {
            navManager.NavigateTo("/smarthome");
        }
        else
        {
            CurrentSmartHome = newSelected;
            string newUrl = selectedSmartHomeService.GetUrlWithDiffrentSmartHomeId(newSelected.Id);
            NavMenu.ReloadPage(navManager, newUrl);
        }
    }

    public async Task<IEnumerable<SmartHomeModel>> Search(string value, CancellationToken token)
    {
        var homes = await smartHomeService.GetJoinedSmartHomes(new());
        homes.EnforceSuccess();

        //to avoid changing the cache
        var newHomes = homes.homes.ToList();
        newHomes.Insert(0, ExitHome);
        return newHomes;
    }
}
