@using SmartHome.Common.Models.Enums;
@using SmartHome.UI.Components.Devices;
@inject IRoutineService routineService;
@inject IDeviceService deviceService;
@inject ISnackbar snackBar;

<MudPaper Class="d-flex flex-column d-inline-flex flex-grow-1 justify-center my-4 pa-4" Style="width: 100%;" Elevation="0">CreateRoutine
    <MudPaper Class="d-flex flex-column flex-grow-0 gap-0 mb-4" Style=" width: 100%" Elevation="0">
        <MudText Typo="Typo.h4">Routine Name</MudText>
        <MudTextField @bind-Value="@RoutineName" Label="Name" Variant="Variant.Outlined"></MudTextField>
        <MudTimePicker Label="Start Routine (24 hours)" @bind-Time="_time"></MudTimePicker>
        <MudSelect @bind-Value="selectedDay" Label="Selected a day" AnchorOrigin="Origin.TopCenter">
            @foreach (var day in Enum.GetValues<RoutineRepeat>().Where(d => d != RoutineRepeat.None))
            {
                <MudSelectItem Value="day">@day</MudSelectItem>
            }
        </MudSelect>

        <MudButton OnClick="AddDay" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>

        <MudChipSet T="RoutineRepeat">
            @foreach (var day in SelectedDays)
            {
                <MudChip T="RoutineRepeat" Color="Color.Primary" OnClose="@(() => RemoveDay(day))">@day</MudChip>
            }
        </MudChipSet>
        @if (!IsNewRoutine)
        {
            <MudSelect @bind-Value="Device" Label="Select a device" AnchorOrigin="Origin.TopCenter">
                @foreach (var device in AllDevices)
                {
                    <MudSelectItem Value="device">@device.Name</MudSelectItem>
                }
            </MudSelect>
            <MudButton OnClick="AddDevice" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>

            <MudPaper Class="d-flex d-inline-flex flex-grow-1 justify-center mb-4" Style="width: 100%; background-color: transparent;" Elevation="0">
                <MudPaper class="d-flex flex-wrap align-center gap-12 justify-space-between Apparaat-Container" Style="width: 100%; background-color: transparent;" Elevation="0">
                    @foreach (var device in SelectedDevices)
                    {
                        <MudPaper Class="d-flex flex-column align-center flex-grow-1 gap-1" Elevation="0">
                            <div>
                                @device.Name
                                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@((e) => RemoveDevice(device))">Delete</MudButton>
                            </div>
                            @switch (Device.Type)
                            {
                                case DeviceType.Lamp:
                                    <LampSettings Device="@Device" />
                                    break;
                                case DeviceType.Televisie:
                                    <TelevisonSettings Device="@Device" />
                                    break;
                                case DeviceType.Wasmachine:
                                    <WashingMachineSettings Device="@Device" />
                                    break;
                                case DeviceType.Router:
                                    <Wifi_RouterSettings Device="@Device" />
                                    break;
                            }
                        </MudPaper>
                    }
                </MudPaper>
            </MudPaper>
        }
    </MudPaper>

    <MudPaper class="d-flex flex-row gap-1 justify-space-between mt-2" Style="width: 100%;" Elevation="0">
        <MudButton @onclick="CloseMenu" Class="my-1" Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" StartIcon="@Icons.Material.Filled.Close">Close</MudButton>
        <MudSpacer />
        @if (IsNewRoutine)
        {
            <MudButton @onclick="CreateRoutine" Class="my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save">Save New Routine</MudButton>
        }
        else
        {
            <MudButton @onclick="UpdateRoutine" Class="my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save">Save Edit Routine</MudButton>
        }
    </MudPaper>
</MudPaper>

@code {
    private RoutineRepeat selectedDays = RoutineRepeat.None;
    private RoutineRepeat selectedDay = RoutineRepeat.None;
    private TimeSpan? _time;
    bool IsNewRoutine = false;
    string RoutineName = "";
    private Routine _Routine;
    private List<Device> AllDevices = [];
    private List<Device> SelectedDevices = [];
    private Device Device = new Device(){ Name = "Empty"};

    private IEnumerable<RoutineRepeat> SelectedDays => Enum.GetValues<RoutineRepeat>()
        .Where(day => day != RoutineRepeat.None && selectedDays.Has(day));


    protected override async void OnInitialized()
    {
        var devices = await deviceService.GetAllDevices(new());
        if (devices.EnsureSuccess(snackBar))
        {
            AllDevices = devices.Devices;
            AllDevices.LoadMultipleDeviceConfigs();
        }
        if (_Routine != null && _Routine.DeviceActions != null && _Routine.DeviceActions.Count > 0)
        {
            foreach (var item in _Routine.DeviceActions)
            {
                item.Device!.LoadDeviceConfig();
                SelectedDevices.Add(item.Device!);
            }
        }
        StateHasChanged();
        base.OnInitialized();
    }
    private void AddDay()
    {
        selectedDays = selectedDays.Add(selectedDay);
    }

    private void RemoveDay(RoutineRepeat day)
    {
        selectedDays = selectedDays.Remove(day);
    }

    private void AddDevice()
    {
        if (!SelectedDevices.Contains(Device)){
            SelectedDevices.Add(Device);
            AllDevices.Remove(Device);
        }
    } 

    private void RemoveDevice(Device toRemove)
    {
        if (SelectedDevices.Contains(Device))
        {
            SelectedDevices.Remove(toRemove);
            AllDevices.Add(toRemove);
        }
    }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private async void CloseMenu()
    {
        //Verzoek om shcerm te sluiten
        MudDialog.Close(DialogResult.Ok("Close"));
    }

    private async Task CreateRoutine()
    {
        //Als alle waarden zijn ingevuld in de UI
        _Routine = new Routine();
        _Routine.Name = RoutineName;
        _Routine.Start = new TimeOnly(_time.Value.Ticks);
        _Routine.RepeatDays = (byte)selectedDays;
        //Maar een nieuwe Routine aan in de database met de api
        var result = await routineService.CreateRoutine(new(_Routine));
        result.Show(snackBar, "Routine is succesfully created!", Severity.Success);
        if (result.WasSuccess())
        {
            MudDialog.Close(DialogResult.Ok(_Routine));
        }
    }

    private async Task UpdateRoutine()
    {
        TimeOnly timeOnly = new TimeOnly(_time.Value.Ticks);

        //Als er 1 of meer waarden verandert zijn in de UI
        Routine newRoutine = new Routine()
        {
            Id = _Routine.Id,
            Name = _Routine.Name,
            SmartHomeId = _Routine.SmartHomeId,
            DeviceActions = _Routine.DeviceActions,
            RepeatDays = _Routine.RepeatDays,
            Start = _Routine.Start
        };

        newRoutine.Name = RoutineName;
        newRoutine.Start = timeOnly;
        newRoutine.RepeatDays = (byte)selectedDays;
        newRoutine.DeviceActions = await DeviceActions();

        if (Routine.Name == newRoutine.Name && Routine.Start == newRoutine.Start && Routine.RepeatDays == newRoutine.RepeatDays && Routine.DeviceActions == newRoutine.DeviceActions)
        {
            new SuccessResponse().Show(snackBar, "There are no changes", Severity.Warning);
        }
        else{
            //Update Routine naar database met de api

            var result = await routineService.UpdateRoutine(new(newRoutine));
            if (result.WasSuccess())
            {
                result.Show(snackBar, "Routine is succesfully updated!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(newRoutine));
            }
            else{
                result.Show(snackBar, result._RequestMessage, Severity.Warning);
            }
        }
    }

    private async Task<List<DeviceAction>> DeviceActions()
    {
        foreach (var device in SelectedDevices)
        {
            device.SaveDeviceConfig();
            DeviceAction ToCreate = new DeviceAction()
                {
                    JsonObjectConfig = device.JsonObjectConfig,
                };

            if (_Routine.DeviceActions == null){
                _Routine.DeviceActions = [];
            }
            var exist = _Routine.DeviceActions.Where(da => da.DeviceId == device.Id).ToList().Count();
            if (exist == 0){
                _Routine.DeviceActions.Add(ToCreate);
                var result = await routineService.CreateDeviceAction(new(ToCreate));
            }
        }
        return _Routine.DeviceActions != null ? _Routine.DeviceActions : [];
    }

    [Parameter]
    public Routine Routine
    {
        set
        {
            //Kijk of de meegegeven Routine geen waarde heeft
            if (value is not null)
            {
                _Routine = value;
                _Routine.DeviceActions = value.DeviceActions;
                RoutineName = value.Name;
                _time = new TimeSpan(value.Start.Ticks);
                selectedDays = (RoutineRepeat)value.RepeatDays;
                
            }
            else
            {
                IsNewRoutine = true;
            }
        }

        get
        {
            return _Routine;
        }
    }
}