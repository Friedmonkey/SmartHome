@using SmartHome.Common.Models.Enums;
@inject IRoutineService routineService;
@inject ISnackbar snackBar;

<MudPaper Class="d-flex flex-column d-inline-flex flex-grow-1 justify-center my-4 pa-4" Style="width: 100%;" Elevation="0">CreateRoutine
    <MudPaper Class="d-flex flex-column flex-grow-0 gap-0 mb-4" Style="min-width: 370px; width: 45%" Elevation="0">
        <MudText Typo="Typo.h4">Routine Name</MudText>
        <MudTextField @bind-Value="@RoutineName" Label="Name" Variant="Variant.Outlined"></MudTextField>
        <MudTimePicker Label="Start Routine (24 hours)" @bind-Time="_time"></MudTimePicker>
        <MudSelect @bind-Value="selectedDay" Label="Selecteer een dag" AnchorOrigin="Origin.TopCenter">
            @foreach (var day in Enum.GetValues<RoutineRepeat>().Where(d => d != RoutineRepeat.None))
            {
                <MudSelectItem Value="day">@day</MudSelectItem>
            }
        </MudSelect>

        <MudButton OnClick="AddDay" Variant="Variant.Filled" Color="Color.Primary">Toevoegen</MudButton>

        <MudChipSet T="RoutineRepeat">
            @foreach (var day in SelectedDays)
            {
                <MudChip T="RoutineRepeat" Color="Color.Primary" OnClose="@(() => RemoveDay(day))">@day</MudChip>
            }
        </MudChipSet>

    </MudPaper>

    <MudPaper class="d-flex flex-row gap-1 justify-space-between mt-2" Style="width: 100%;" Elevation="0">
        <MudButton @onclick="CloseMenu" Class="my-1" Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" StartIcon="@Icons.Material.Filled.Close">Close</MudButton>
        <MudSpacer />
        @if (IsNewRoutine)
        {
            <MudButton @onclick="CreateRoutine" Class="my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save">Save New Device</MudButton>
        }
        else
        {
            <MudButton @onclick="UpdateRoutine" Class="my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save">Save Edit Device</MudButton>
        }
    </MudPaper>
</MudPaper>

@code {
    private RoutineRepeat selectedDays = RoutineRepeat.None;
    private RoutineRepeat selectedDay = RoutineRepeat.None;
    private TimeSpan? _time;
    bool IsNewRoutine = false;
    string RoutineName = "";
    private Routine _Routine;

    private IEnumerable<RoutineRepeat> SelectedDays => Enum.GetValues<RoutineRepeat>()
        .Where(day => day != RoutineRepeat.None && selectedDays.Has(day));

    private void AddDay()
    {
        selectedDays = selectedDays.Add(selectedDay);
    }

    private void RemoveDay(RoutineRepeat day)
    {
        selectedDays = selectedDays.Remove(day);
    }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private async void CloseMenu()
    {
        //Verzoek om shcerm te sluiten
        MudDialog.Close(DialogResult.Ok("Close"));
    }

    private async Task CreateRoutine()
    {
        //Als alle waarden zijn ingevuld in de UI
        Routine newRoutine = new Routine();
        newRoutine.Name = RoutineName;
        newRoutine.Start = new TimeOnly(_time.Value.Ticks);
        newRoutine.RepeatDays = (byte)selectedDays;
        //newRoutine.SmartHomeId = _smartHomeId;

        //Maar een nieuwe Routine aan in de database met de api
        var result = await routineService.CreateRoutine(new(newRoutine));
        result.Show(snackBar, "Routine is succesfully created!", Severity.Success);
        if (result.WasSuccess())
        {
            MudDialog.Close(DialogResult.Ok(newRoutine));
        }
    }


    private async Task UpdateRoutine()
    {
        TimeOnly timeOnly = new TimeOnly(_time.Value.Ticks);

        //Als er 1 of meer waarden verandert zijn in de UI
        Routine newRoutine = new Routine()
        {
            Id = _Routine.Id,
            Name = _Routine.Name,
            SmartHomeId = _Routine.SmartHomeId,
            DeviceActions = _Routine.DeviceActions,
            RepeatDays = _Routine.RepeatDays,
            Start = _Routine.Start
        };

        newRoutine.Name = RoutineName;
        newRoutine.Start = timeOnly;
        newRoutine.RepeatDays = (byte)selectedDays;

        if (Routine.Name == newRoutine.Name && Routine.Start == newRoutine.Start && Routine.RepeatDays == newRoutine.RepeatDays)
        {
            new SuccessResponse().Show(snackBar, "There are no changes", Severity.Warning);
        }
        else{
            //Update Routine naar database met de api
            var result = await routineService.UpdateRoutine(new(newRoutine));

            if (result.WasSuccess())
            {
                result.Show(snackBar, "Routine is succesfully updated!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(newRoutine));
                StateHasChanged();
            }
            else{
                result.Show(snackBar, result._RequestMessage, Severity.Warning);
            }
        }
    }

    [Parameter]
    public Routine Routine
    {
        set
        {
            //Kijk of de meegegeven Routine geen waarde heeft
            if (value is not null)
            {
                _Routine = value;
                RoutineName = value.Name;
                _time = new TimeSpan(value.Start.Ticks);
                selectedDays = (RoutineRepeat)value.RepeatDays;
            }
            else
            {
                IsNewRoutine = true;
            }
        }

        get
        {
            return _Routine;
        }
    }
}