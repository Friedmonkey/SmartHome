@page "/smarthome/{SmartGuid}/admin/devices"
@inherits SmartHomeGuidPage

@inject IDeviceService deviceService;
@inject IRoomService roomService;
@inject ISnackbar snackBar;
@inject IDialogService dialogService;

<MudDropContainer T="Device" Items="deviceList" ItemsSelector="@((Device,dropzone) => Device.RoomId.ToString() == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-column flex-grow-1">
    <ChildContent>
        @foreach (Room room in roomList)
        {
            <MudDropZone T="Device" Identifier="@room.Id.ToString()" Class="flex-grow-1">
                <MudText Typo="Typo.h6" Class="my-3 ml-2">@room.Name</MudText>
            </MudDropZone>
        }
    </ChildContent>
    <ItemRenderer>
        <MudPaper Class="d-flex flex-wrap flex-grow-1 gap-4 border-solid border-2 mud-border-primary ml-2 mr-2" Style="" Elevation="0">
            <MudText Typo="Typo.h6" Class="mr-1" Style="width: 20%; min-width: 200px;"><strong>Name : </strong>@context.Name</MudText>
            <MudText Typo="Typo.h6" Class="mr-1" Style="width: 20%; min-width: 200px;"><strong>Type : </strong>@context.Type</MudText>
            <MudSpacer />
            <MudButton @onclick="@(e => ShowDeviceDialog(context))" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary">Edit</MudButton>
            <MudButton @onclick="@(e => DeleteDevice(context.Id))" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>
<MudPaper Class="d-flex d-inline-flex flex-grow-1 justify-center mb-4 mt-2" Style="width: 100%;" Elevation="0">
    <MudSpacer />
    <MudButton @onclick="@(e => ShowDeviceDialog(null))" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Add New Device</MudButton>
    @if (roomList.Count > 0)
    {
        <MudButton @onclick="UpdateRooms" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary">Save Rooms</MudButton>
    }
</MudPaper>

@code {
    private List<Device> deviceList = new List<Device>();
    private List<Room> roomList = new List<Room>();

    protected override async Task OnInitializedAsync()
    {
        var roomResult = await roomService.GetAllRooms(new());
        if (roomResult.EnsureSuccess(snackBar))
            roomList = roomResult.Rooms;

        var deviceResult = await deviceService.GetAllDevices(new());
        if (deviceResult.EnsureSuccess(snackBar))
            deviceList = deviceResult.Devices;
    }
    private async Task ShowDeviceDialog(Device newDevice = null)
    {
        string title = "Update device";
        bool isNewDevice = (newDevice is null);

        if (isNewDevice)
        {
            title = "Create device";
            newDevice = new Device();
        }

        var parameters = new DialogParameters();
        parameters.Add("Rooms", roomList);
        parameters.Add("NewDevice", newDevice);
        parameters.Add("IsNewDevice", isNewDevice);

        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, BackdropClick = false };
        var dialog = await dialogService.ShowAsync<EditDeviceDialog>(title, parameters, closeOnEscapeKey);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            if (newDevice is null)
                throw new Exception("dialog made device null");

            if (isNewDevice)
                deviceList.Add(newDevice);
        }
    }

    private async Task UpdateRooms()
    {   
        var changedRooms = deviceList.Where(c => c.RoomId != c.Room.Id).ToList();
        var result = await deviceService.UpdateDevicesRange(new(changedRooms));
        result.Show(snackBar, "Device is succesfully updated!", Severity.Success); 
    }

    private async Task DeleteDevice(Guid deviceGuid)
    {
        var result = await deviceService.DeleteDevice(new(deviceGuid));
        result.Show(snackBar, "Device is succesfully deleted!", Severity.Success);
        if (result.WasSuccess())
        {   //local delete from ui
            deviceList.RemoveAll(d => d.Id == deviceGuid);
        }
    }

    private void ItemUpdated(MudItemDropInfo<Device> dropItem)
    {
        //Pas de room aan in de _deviceList van de Drag en Drop container
        //dropItem.Item.Room = roomList.Where(r => r.Id == Guid.Parse(dropItem.DropzoneIdentifier)).ToList().First();
        dropItem.Item.RoomId = Guid.Parse(dropItem.DropzoneIdentifier);
    }
}
