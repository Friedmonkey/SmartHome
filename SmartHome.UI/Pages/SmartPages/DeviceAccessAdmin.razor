@page "/smarthome/{SmartGuid}/admin/users/{UserGuidStr}"
@inherits SmartHomeGuidPage
@inject ISmartHomeService smartHomeService;
@inject IDeviceService deviceSerivce;
@inject IRoomService roomService;
@inject ISnackbar snackBar;

@* <MudText Typo="Typo.h1">This needs to be implmented</MudText> *@
<MudTable 
Items="Devices"
Dense="true">
    <ColGroup>
        <col style="width: 60px;" />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.GroupName}: {GetName(context.Key)}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.Type</MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">Total: @context.Items.Count()</MudTh>
    </GroupFooterTemplate>
</MudTable>

@code {
    [Parameter]
    public string? UserGuidStr { get; set; } = null;
    public Guid? UserGuid => ParsingExtention.GuidTryParse(UserGuidStr);

    private List<Device> Devices = new();
    private List<Room> Rooms = new();

    private TableGroupDefinition<Device> _groupDefinition = new()
    {
        GroupName = "Room",
        Indentation = true,
        Expandable = true,
        Selector = (e) => e.RoomId
    };

    private string GetName(object? guidObj)
    {
        Guid guid = Guid.Empty;
        if (guidObj is Guid g)
            guid = g;

        var room = Rooms.FirstOrDefault(r => r.Id == guid);
        if (room is null)
            snackBar.Add($"Room not found for {guidObj}", Severity.Error);
        else
            return room!.Name ?? "Room has no name";

        return "Room_not_found";
    }

    protected override async Task OnInitializedAsync()
    {
        var devices = await deviceSerivce.GetAllDevices(new());
        if (devices.EnsureSuccess(snackBar))
            Devices = devices.Devices;

        var rooms = await roomService.GetAllRooms(new());
        if (rooms.EnsureSuccess(snackBar))
            Rooms = rooms.Rooms;
    }
}
