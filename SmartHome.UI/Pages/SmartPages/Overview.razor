@page "/smarthome/{SmartGuid}/overview"
@attribute [Authorize]
@inject SmartHomeState smartHomeState;
@inject NavigationManager navManager;
@using SmartHome.UI.Components;
@using SmartHome.Common.Api;
@using SmartHome.Common.Models.Entities;
@using SmartHome.Common.Models.Enums;
@inject IDeviceService deviceService;
@inject ISnackbar snackBar;

@if (devicesList.Count <= 0)
{
    <MudText>You have no devices</MudText>
}

@foreach (Room room in devicesList.Select(r => r.Room).DistinctBy(r => r.Id).ToList())
{
    List<Device> roomDeviceslist = devicesList.Where(d => d.RoomId == room.Id).ToList();
    //Ga door all rooms in de roomLists
    @if (roomDeviceslist.Count > 0)
    {
        //Zet room name op het scherm
        <MudText Typo="Typo.h3" Align="Align.Center">@room.Name</MudText>
        <MudDivider DividerType='DividerType.Middle' Class='my-6' />
        <MudPaper Class="d-flex d-inline-flex flex-grow-1 justify-center mb-4" Style="width: 100%; background-color: transparent;" Elevation="0">
            <MudPaper class="d-flex flex-wrap align-center gap-12 justify-space-between Apparaat-Container" Style="width: 90%; background-color: transparent;" Elevation="0">
                @for (int d = 0; d < roomDeviceslist.Count; d++)
                {
                    //Zet de apparaten op het scherm bij de room
                    switch (roomDeviceslist[d].Type)
                    {
                        case DeviceType.Lamp:
                            <Lamp Id="@roomDeviceslist[d].Id" Name="@roomDeviceslist[d].Name" config="@roomDeviceslist[d].JsonObjectConfig"></Lamp>
                            break;
                        case DeviceType.Televisie:
                            <Televisie Name="@roomDeviceslist[d].Name" Config="@roomDeviceslist[d].JsonObjectConfig"></Televisie>
                            break;
                        case DeviceType.Wasmachine:
                            <Wasmachine Name="@roomDeviceslist[d].Name" Config="@roomDeviceslist[d].JsonObjectConfig"></Wasmachine>
                            break;
                        case DeviceType.Router:
                            <Wifi_Router Id="@roomDeviceslist[d].Id" Name="@roomDeviceslist[d].Name" Config="@roomDeviceslist[d].JsonObjectConfig"></Wifi_Router>
                            break;
                    }
                }
            </MudPaper>
        </MudPaper>
    }
}

@code {
    [Parameter]
    public string? SmartGuid { get; set; }
    private Guid SmartHomeId;

    List<Device> devicesList = new List<Device>();

    bool DataLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        if (SmartGuid is null)
        {
            smartHomeState.SetSelectedSmartHome(null);
        }
        else
        {
            if (!Guid.TryParse(SmartGuid, out SmartHomeId))
                navManager.NavigateTo("/smarthome");
            smartHomeState.SetSelectedSmartHome(SmartHomeId);
        }

        //Haal de Kamers en apparten op uit de DataBase met de APi
        await LoadDevices();
    }

    private async Task LoadDevices()
    {
        var Devices = await deviceService.GetDevicesWithAccess(new(SmartHomeId));
        if (Devices.WasSuccess())
        {
            //Zet de apparaten in een lijst
            devicesList = Devices.Devices;
            StateHasChanged();
        }
    }
}