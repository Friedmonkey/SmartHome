@using SmartHome.Common.Models.Entities;
@using SmartHome.UI.Components.Beheer;
@using SmartHome.Common.Api;
@inject IRoomService roomService;
@inject IDialogService DialogService;
@inject ISnackbar snackBar;

<MudDataGrid Items="@roomList" Filterable="false" SortMode="@SortMode.None" Groupable="false">
    <Columns>
        <PropertyColumn Property="x => x.Name" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudButton @onclick="@(e => OpenRoomEditDialog(context.Item))" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary">Edit</MudButton>
                    <MudButton @onclick="@(e => DeleteRoom(context.Item.Id))" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
<MudPaper Class="d-flex d-inline-flex flex-grow-1 justify-center mb-4 mt-2" Style="width: 100%; background-color: transparent;" Elevation="0">
    <MudSpacer />
    <MudButton @onclick="@(e => OpenRoomEditDialog(null))" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Add New Device</MudButton>
</MudPaper>

@code {
    //DeleteRoom
    private List<Room> roomList = new List<Room>();
    private Guid _SmartHomeId;

    protected override async Task OnInitializedAsync()
    {
        //haal de room uit de database met de smarthome Guid
        var result = await roomService.GetAllRooms(new(_SmartHomeId));

        if (result.WasSuccess())
        {
            //Zet de apparaten in een lijst
            roomList = result.Rooms;
            StateHasChanged();
        }
        else
        {
            snackBar.Add("Error when get the devices from the database!", Severity.Error);
        }
    }

    private async void OpenRoomEditDialog(Room _roomToEditOrCreate)
    {
        //zet de room en type aanpassing van de room in variable en refresh html om room edit menu zichtbaar te maken
        var dialogParameter = new DialogParameters<RoomEditorBeheer>();
        dialogParameter.Add(p => p.room, _roomToEditOrCreate);

        string Title = "New Room";
        if (_roomToEditOrCreate is not null)
        {
            Title = "Edit Room";
        }

        //Open de dialog popup voor het invoeren van room gegevens
        var dialog = await DialogService.ShowAsync<RoomEditorBeheer>(Title, dialogParameter);
        var result = await dialog.Result;
    }

    private async Task DeleteRoom(Guid roomGuid)
    {
        //Verwijder room uit de databse met de api
        var result = await roomService.DeleteRoom(new(roomGuid));

        if (result.WasSuccess())
        {
            //Verwijder lijst uit de UI
            roomList.Remove(roomList.Where(d => d.Id == roomGuid).ToList().First());
            snackBar.Add("Room is succesfully deleted!", Severity.Success);
        }
        else
        {
            snackBar.Add(result._RequestMessage, Severity.Error);
        }
    }

    [Parameter]
    public Guid SmartHomeId
    {
        set
        {
            _SmartHomeId = value;
        }
    }
}