@using SmartHome.UI.Components.Beheer;
@inject IDeviceService deviceService;
@inject ISnackbar snackBar;

@if (IsEditOrNewDevice)
{
    <DeviceAanpassenBeheer Close="CloseEditDeviceMenu" OnDiviceCreated="CreateDevice" OnDiviceEdited="UpdateDevice" device="@deviceToEditOrCreate" Rooms="allRooms" />
}

<MudDropContainer T="Device" Items="deviceList" ItemsSelector="@((Device,dropzone) => Device.RoomId.ToString() == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-column flex-grow-1">
    <ChildContent>
        @foreach (Room room in allRooms)
        {
            <MudDropZone T="Device" Identifier="@room.Id.ToString()" Style="background-color: white;" Class="flex-grow-1">
                <MudText Typo="Typo.h6" Class="my-3 ml-2">@room.Name</MudText>
            </MudDropZone>
        }
    </ChildContent>
    <ItemRenderer>
        <MudPaper Class="d-flex flex-wrap flex-grow-1 gap-4 border-solid border-2 mud-border-primary ml-2 mr-2" Style="" Elevation="0">
            <MudText Typo="Typo.h6" Class="mr-1" Style="width: 20%; min-width: 200px;"><strong>Name : </strong>@context.Name</MudText>
            <MudText Typo="Typo.h6" Class="mr-1" Style="width: 20%; min-width: 200px;"><strong>Type : </strong>@context.Type</MudText>
            <MudSpacer />
            <MudButton @onclick="@(e => OpenDeviceEdit(context))" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary">Edit</MudButton>
            <MudButton @onclick="@(e => DeleteDevice(context.Id))" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>
<MudPaper Class="d-flex d-inline-flex flex-grow-1 justify-center mb-4 mt-2" Style="width: 100%; background-color: transparent;" Elevation="0">
    <MudSpacer />
    <MudButton @onclick="@(e => OpenDeviceEdit(null))" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Add New Device</MudButton>
    <MudButton @onclick="UpdateRooms" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary">Save Rooms</MudButton>
</MudPaper>
@code {
    private bool IsEditOrNewDevice = false;
    private Device deviceToEditOrCreate;
    private List<Room> allRooms = new List<Room>();

    private List<Device> deviceList = new();
    private List<DeviceObj> StartDeviceList = new();


    protected override async Task OnInitializedAsync()
    {
        var rooms = await deviceService.GetAllRooms(new());
        if (rooms.EnsureSuccess(snackBar))
            allRooms = rooms.Rooms;

        var Devices = await deviceService.GetAllDevices(new());
        if (Devices.EnsureSuccess(snackBar))
        {
            deviceList = Devices.Devices;
            StartDeviceList = deviceList.Select(x => new DeviceObj { Id = x.Id, RoomId = x.RoomId }).ToList();
        }
    }

    private void CloseEditDeviceMenu()
    {   //Sluit het device aanpassings menu
        IsEditOrNewDevice = false;
        StateHasChanged();
    }

    private void OpenDeviceEdit(Device _deviceToEditOrCreate)
    {
        if (IsEditOrNewDevice == false)
        {
            //zet de device en type aanpassing van het device in variable en refresh html om Device aanpassing menu zichtbaar te maken
            deviceToEditOrCreate = _deviceToEditOrCreate;
            IsEditOrNewDevice = true;
            StateHasChanged();
        }
        else
        {   //Wanneer DeviceAanpaseBeheer al open is
            snackBar.Add("The Edit Field is already open. Close it first!!!", Severity.Warning);
        }
    }

    private async Task CreateDevice(Device device)
    {
        //Maar een nieuwe device aan in de database met de api
        var result = await deviceService.CreateDevice(new(device));
        result.Show(snackBar, "Device is succesfully created!", Severity.Success);

        if (result.WasSuccess())
            CloseEditDeviceMenu();
    }

    private async Task UpdateDevice(Device device)
    {
        //Update device naar database met de api
        var result = await deviceService.UpdateDevice(new(device));
        result.Show(snackBar, "Device is succesfully updated!", Severity.Success);

        if (result.WasSuccess())
            CloseEditDeviceMenu();
    }

    private async Task UpdateRooms()
    {
        //Update device naar database met de api
        List<Device> ChanchedRooms = new List<Device>();
        ChanchedRooms = deviceList.Where(c => c.RoomId != StartDeviceList.Where(h => h.Id == c.Id).ToList().First().RoomId).ToList();
        var result = await deviceService.UpdateDevicesRange(new(ChanchedRooms));

        result.Show(snackBar, "Device is succesfully updated!", Severity.Success);
    }

    private async Task DeleteDevice(Guid deviceGuid)
    {
        //Verwijder device uit de databse met de api
        var result = await deviceService.DeleteDevice(new(deviceGuid));
        result.Show(snackBar, "Device is succesfully deleted!", Severity.Success);
        if (result.WasSuccess())
        {   //Verwijder lijst uit de UI
            deviceList.Remove(deviceList.Where(d => d.Id == deviceGuid).ToList().First());
        }
    }

    private void ItemUpdated(MudItemDropInfo<Device> dropItem)
    {
        //Pas de room aan in de _deviceList van de Drag en Drop container
        dropItem.Item.Room = allRooms.Where(r => r.Id == Guid.Parse(dropItem.DropzoneIdentifier)).First();
    }
    
    class DeviceObj
    {
        public Guid Id { get; set; }

        public Guid RoomId { get; set; }
    }
}

