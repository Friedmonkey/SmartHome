@using SmartHome.UI.Components.Beheer;
@inject IDeviceService deviceService;
@inject ISnackbar snackBar;
@inject IDialogService DialogService;
@inject SmartHomeState smartHomeState;

<MudDropContainer T="Device" Items="deviceList" ItemsSelector="@((Device,dropzone) => Device.Room.Id.ToString() == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-column flex-grow-1">
    <ChildContent>
        @for (int i = 0; i < roomList.Count; i++)
        {
            string Name = roomList[i].Name;
            <MudDropZone T="Device" Identifier="@roomList[i].Id.ToString()" Style="background-color: white;" Class="flex-grow-1">
                <MudText Typo="Typo.h6" Class="my-3 ml-2">@Name</MudText>
            </MudDropZone>
        }
    </ChildContent>
    <ItemRenderer>
        <MudPaper Class="d-flex flex-wrap flex-grow-1 gap-4 border-solid border-2 mud-border-primary ml-2 mr-2" Style="" Elevation="0">
            <MudText Typo="Typo.h6" Class="mr-1" Style="width: 20%; min-width: 200px;"><strong>Name : </strong>@context.Name</MudText>
            <MudText Typo="Typo.h6" Class="mr-1" Style="width: 20%; min-width: 200px;"><strong>Room : </strong>@context.Room.Name</MudText>
            <MudText Typo="Typo.h6" Class="mr-1" Style="width: 20%; min-width: 200px;"><strong>Type : </strong>@context.Type</MudText>
            <MudSpacer />
            <MudButton @onclick="@(e => OpenDeviceEditDialog(context))" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary">Edit</MudButton>
            <MudButton @onclick="@(e => DeleteDevice(context.Id))" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>
<MudPaper Class="d-flex d-inline-flex flex-grow-1 justify-center mb-4 mt-2" Style="width: 100%; background-color: transparent;" Elevation="0">
    <MudSpacer />
    <MudButton @onclick="@(e => OpenDeviceEditDialog(null))" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Add New Device</MudButton>
    <MudButton @onclick="UpdateRooms" Class="mx-5 my-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary">Save Rooms</MudButton>
</MudPaper>

@code {
    private List<Device> deviceList = new List<Device>();
    private List<Room> roomList = new List<Room>();
    private Device deviceToEditOrCreate;
    private Guid _SmartHomeId;

    protected override async Task OnInitializedAsync()
    {
        //haal de devices uit de database met de smarthome Guid
        var result = await deviceService.GetAllDevices(new(_SmartHomeId));
        if (result.WasSuccess())
        {
            //Zet de apparaten in een lijst
            deviceList = result.Devices;
            roomList = result.Devices.Select(r => r.Room).DistinctBy(r => r.Id).ToList();
            StateHasChanged();
        }
        else
        {
            snackBar.Add("Error when get the devices from the database!", Severity.Error);
        }
    }

    private async void OpenDeviceEditDialog(Device _deviceToEditOrCreate)
    {
        //zet de device en type aanpassing van het device in variable en refresh html om Device aanpassing menu zichtbaar te maken
        var dialogParameter = new DialogParameters<DeviceEditorBeheer>();
        dialogParameter.Add(p => p.device, _deviceToEditOrCreate);
        dialogParameter.Add(p => p.Rooms, roomList);

        string Title = "New Device";
        if (_deviceToEditOrCreate is not null)
        {
            Title = "Edit Device";
        }

        //Open de dialog popup voor het invoeren van device gegevens
        var dialog = await DialogService.ShowAsync<DeviceEditorBeheer>(Title, dialogParameter);
        var result = await dialog.Result;
    }

    private async Task UpdateRooms()
    {
        //Update device naar database met de api
        List<Device> ChanchedRooms = new List<Device>();
        ChanchedRooms = deviceList.Where(c => c.RoomId != c.Room.Id).ToList();
        var result = await deviceService.UpdateDevicesRange(new(ChanchedRooms));

        if (result.WasSuccess())
        {
            snackBar.Add("Device is succesfully updated!", Severity.Success);
        }
        else
        {
            snackBar.Add(result._RequestMessage, Severity.Error);
        }
    }

    private async Task DeleteDevice(Guid deviceGuid)
    {
        //Verwijder device uit de databse met de api
        var result = await deviceService.DeleteDevice(new(deviceGuid));

        if (result.WasSuccess())
        {
            //Verwijder lijst uit de UI
            deviceList.Remove(deviceList.Where(d => d.Id == deviceGuid).ToList().First());
            snackBar.Add("Device is succesfully deleted!", Severity.Success);
        }
        else
        {
            snackBar.Add(result._RequestMessage, Severity.Error);
        }
    }

    private void ItemUpdated(MudItemDropInfo<Device> dropItem)
    {
        //Pas de room aan in de _deviceList van de Drag en Drop container
        dropItem.Item.Room = roomList.Where(r => r.Id == Guid.Parse(dropItem.DropzoneIdentifier)).ToList().First();
    }

    [Parameter]
    public Guid SmartHomeId
    {
        set
        {
            _SmartHomeId = value;
        }
    }
}

