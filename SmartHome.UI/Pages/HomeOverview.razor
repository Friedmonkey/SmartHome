@page "/smarthome"
@attribute [Authorize]

@inject ISnackbar snackBar;
@inject ISmartHomeService smartHomeService;
@inject NavigationManager navManager;
@inject MemoryCacheService cacheService;

<MudButton 
    StartIcon="@Icons.Material.Rounded.AddCircle"  IconSize="Size.Large" 
    Variant="Variant.Filled" Color="Color.Primary"
    OnClick="() => createDialogVisible = true">
    Create new smartHome
</MudButton>

<HomeCollection Title="Joined homes" OnRefreshClick="RefreshJoined" SmartHomes="joinedSmartHomes" EmptyText="You are not part of any SmartHome, Create one or accept any invites" />
<MudDivider />
<HomeCollection Title="Invited homes" OnRefreshClick="RefreshInvited" SmartHomes="invitedSmartHomes" IsInvite="true" EmptyText="You have no pending invites." />

<MudDialog Style="width: 80%" @bind-Visible="createDialogVisible">
    <TitleContent>
        <MudText>Create new SmartHome</MudText>
    </TitleContent>
    <DialogContent>
        <div class="d-flex flex-column gap-2">
            <MudTextField T="string" Label="SmartHome name:" @bind-Value="createName" />
            <MudTextField T="string" Label="SmartHome wifi name:" @bind-Value="wifiName" />
            <MudTextField T="string" Label="SmartHome wifi password:" @bind-Value="wifiPassword" />
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="() => createDialogVisible = false">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="CreateSmartHome">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<SmartHomeModel> joinedSmartHomes = new();
    private List<SmartHomeModel> invitedSmartHomes = new();

    private bool createDialogVisible = false;
    private string createName = "smartHome";
    private string wifiName = "admin";
    private string wifiPassword = "admin";

    protected override async Task OnInitializedAsync()
    {
        var joined = await smartHomeService.GetJoinedSmartHomes(new());
        if (joined.EnsureSuccess(snackBar))
        {
            joinedSmartHomes = joined.homes;
        }

        var invited = await smartHomeService.GetSmartHomeInvites(new());
        if (invited.EnsureSuccess(snackBar))
        {
            invitedSmartHomes = invited.homes;
        }
    }
    private async Task RefreshJoined()
    {
        joinedSmartHomes = new();
        cacheService.RemoveCacheWithPrimary(SharedConfig.Urls.SmartHome.GetJoinedUrl);
        var joined = await smartHomeService.GetJoinedSmartHomes(new());
        if (joined.EnsureSuccess(snackBar))
            joinedSmartHomes = joined.homes;
        StateHasChanged();
    }
    private async Task RefreshInvited()
    { 
        invitedSmartHomes = new();
        cacheService.RemoveCacheWithPrimary(SharedConfig.Urls.SmartHome.GetInvitesUrl);
        var invited = await smartHomeService.GetSmartHomeInvites(new());
        if (invited.EnsureSuccess(snackBar))
            invitedSmartHomes = invited.homes;
        StateHasChanged();
    }

    private async Task CreateSmartHome()
    {
        var request = new CreateSmartHomeRequest(createName, wifiName, wifiPassword);
        var result = await smartHomeService.CreateSmartHome(request);
        if (result.EnsureSuccess(snackBar))
        {
            snackBar.Add($"SmartHome {createName} created!", Severity.Success);
            cacheService.RemoveCacheWithPrimary(SharedConfig.Urls.SmartHome.GetJoinedUrl);
            navManager.NavigateTo($"/smarthome/{result.Id}/overview");
        }
    }
}
